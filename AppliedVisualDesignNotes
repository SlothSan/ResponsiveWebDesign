<!--Applied Visual Design Module Notes-->

<!--
Create Visual Balance Using the text-align Property

This section of the curriculum focuses on Applied Visual Design. The first group of challenges build on the given card layout to show a number of core principles.

Text is often a large part of web content. CSS has several options for how to align it with the text-align property.

text-align: justify; spaces the text so that each line has equal width.

text-align: center; centers the text

text-align: right; right-aligns the text

And text-align: left; (the default) left-aligns the text.
-->

<style>
    h4 {
    text-align: center;
    }
    p {
    text-align: justify;
    }
    .links {
      margin-right: 20px;
  
    }
    .fullCard {
      border: 1px solid #ccc;
      border-radius: 5px;
      margin: 10px 5px;
      padding: 4px;
    }
    .cardContent {
      padding: 10px;
    }
  </style>
  <div class="fullCard">
    <div class="cardContent">
      <div class="cardText">
        <h4>Google</h4>
        <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>
      </div>
      <div class="cardLinks">
        <a href="https://en.wikipedia.org/wiki/Larry_Page" target="_blank" class="links">Larry Page</a>
        <a href="https://en.wikipedia.org/wiki/Sergey_Brin" target="_blank" class="links">Sergey Brin</a>
      </div>
    </div>
  </div>

  <!--
Adjust the Width of an Element Using the width Property

You can specify the width of an element using the width property in CSS. Values can be given in relative length units (such as em), absolute length units (such as px), or as a percentage of its containing parent element. Here's an example that changes the width of an image to 220px:

img {
  width: 220px;
}
  -->
  <style>
    h4 {
      text-align: center;
    }
    p {
      text-align: justify;
    }
    .links {
      margin-right: 20px;
      text-align: left;
    }
    .fullCard {
      width: 245px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin: 10px 5px;
      padding: 4px;
    }
    .cardContent {
      padding: 10px;
    }
  </style>
  <div class="fullCard">
    <div class="cardContent">
      <div class="cardText">
        <h4>Google</h4>
        <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>
      </div>
      <div class="cardLinks">
        <a href="https://en.wikipedia.org/wiki/Larry_Page" target="_blank" class="links">Larry Page</a>
        <a href="https://en.wikipedia.org/wiki/Sergey_Brin" target="_blank" class="links">Sergey Brin</a>
      </div>
    </div>
  </div>

<!--
Adjust the Height of an Element Using the height Property

You can specify the height of an element using the height property in CSS, similar to the width property. Here's an example that changes the height of an image to 20px:

img {
  height: 20px;
}
-->
<style>
    h4 {
      text-align: center;
      height: 25px;
    }
    p {
      text-align: justify;
    }
    .links {
      margin-right: 20px;
      text-align: left;
    }
    .fullCard {
      width: 245px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin: 10px 5px;
      padding: 4px;
    }
    .cardContent {
      padding: 10px;
    }
  </style>
  <div class="fullCard">
    <div class="cardContent">
      <div class="cardText">
        <h4>Google</h4>
        <p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University.</p>
      </div>
      <div class="cardLinks">
        <a href="https://en.wikipedia.org/wiki/Larry_Page" target="_blank" class="links">Larry Page</a>
        <a href="https://en.wikipedia.org/wiki/Sergey_Brin" target="_blank" class="links">Sergey Brin</a>
      </div>
    </div>
  </div>

<!--
Use the strong Tag to Make Text Bold

To make text bold, you can use the strong tag. This is often used to draw attention to text and symbolize that it is important. With the strong tag, the browser applies the CSS of font-weight: bold; to the element.
-->
<p>Google was founded by Larry Page and Sergey Brin while they were Ph.D. students at <Strong>Stanford University.</strong></p>

<!--
Use the u Tag to Underline Text

To underline text, you can use the u tag. This is often used to signify that a section of text is important, or something to remember. With the u tag, the browser applies the CSS of text-decoration: underline; to the element.
-->
<p>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</p>

<!--
Use the em Tag to Italicize Text

To emphasize text, you can use the em tag. This displays text as italicized, as the browser applies the CSS of font-style: italic; to the element.
-->
<p><em>Google was founded by Larry Page and Sergey Brin while they were <u>Ph.D. students</u> at <strong>Stanford University</strong>.</em></p>

<!--
Use the s Tag to Strikethrough Text

To strikethrough text, which is when a horizontal line cuts across the characters, you can use the s tag. It shows that a section of text is no longer valid. With the s tag, the browser applies the CSS of text-decoration: line-through; to the element.
-->
<h4><s>Google</s> Alphabet</h4>

<!--
Create a Horizontal Line Using the hr Element

You can use the hr tag to add a horizontal line across the width of its containing element. This can be used to define a change in topic or to visually separate groups of content.
Note: In HTML, hr is a self-closing tag, and therefore doesn't need a separate closing tag.
-->
<h4><s>Google</s>Alphabet</h4>
<hr>

<!--
djust the background-color Property of Text

Instead of adjusting your overall background or the color of the text to make the foreground easily readable, you can add a background-color to the element holding the text you want to emphasize. This challenge uses rgba() instead of hex codes or normal rgb().

    rgba stands for:
      r = red
      g = green
      b = blue
      a = alpha/level of opacity

The RGB values can range from 0 to 255. The alpha value can range from 1, which is fully opaque or a solid color, to 0, which is fully transparent or clear. rgba() is great to use in this case, as it allows you to adjust the opacity. This means you don't have to completely block out the background.

You'll use background-color: rgba(45, 45, 45, 0.1) for this challenge. It produces a dark gray color that is nearly transparent given the low opacity value of 0.1.
-->
<style>
h4 {
    text-align: center;
    padding: 10px;
    background-color: rgba(45, 45, 45, 0.1);
  }
</style>

<!--
Adjust the Size of a Heading Element Versus a Paragraph Element

The font size of heading elements (h1 through h6) should generally be larger than the font size of paragraph tags. This makes it easier for the user to visually understand the layout and level of importance of everything on the page. You use the font-size property to adjust the size of the text in an element.
-->
<style>
    h4 {
      text-align: center;
      background-color: rgba(45, 45, 45, 0.1);
      padding: 10px;
      font-size: 27px;
  
    }
</style>

<!--
Add a box-shadow to a Card-like Element

The box-shadow property applies one or more shadows to an element.

The box-shadow property takes the following values, in order:

    offset-x (how far to push the shadow horizontally from the element)
    offset-y (how far to push the shadow vertically from the element)
    blur-radius
    spread-radius
    color

The blur-radius and spread-radius values are optional.

Multiple box-shadows can be created by using commas to separate properties of each box-shadow element.

Here's an example of the CSS to create multiple shadows with some blur, at mostly-transparent black colors:

box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23
-->

<style>
      #thumbnail {
    box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
  }
</style>

<!--
Decrease the Opacity of an Element

The opacity property in CSS is used to adjust the opacity, or conversely, the transparency for an item.

    A value of 1 is opaque, which isn't transparent at all.
    A value of 0.5 is half see-through.
    A value of 0 is completely transparent.

The value given will apply to the entire element, whether that's an image with some transparency, or the foreground and background colors for a block of text.
-->
<style>
      .links {
    text-align: left;
    color: black;
    opacity: 0.7;

  }
</style>

<!--
Use the text-transform Property to Make Text Uppercase

The text-transform property in CSS is used to change the appearance of text. It's a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements.

The following table shows how the different text-transformvalues change the example text "Transform me".
Value	Result
lowercase	"transform me"
uppercase	"TRANSFORM ME"
capitalize	"Transform Me"
initial	Use the default value
inherit	Use the text-transform value from the parent element
none	Default: Use the original text
-->
<style>
    h4 {
      text-align: center;
      background-color: rgba(45, 45, 45, 0.1);
      padding: 10px;
      font-size: 27px;
      text-transform: uppercase;
    }
</style>

<!--
et the font-size for Multiple Heading Elements

The font-size property is used to specify how large the text is in a given element. This rule can be used for multiple elements to create visual consistency of text on a page. In this challenge, you'll set the values for all h1 through h6 tags to balance the heading sizes.

In the style tags, set the font-size of the:

    h1 tag to 68px.
    h2 tag to 52px.
    h3 tag to 40px.
    h4 tag to 32px.
    h5 tag to 21px.
    h6 tag to 14px.
-->

<style>

    h1 {
      font-size: 68px;
    }
    
    h2 {
      font-size: 52px;
    }
    
    h3 {
      font-size: 40px;
    }
    
    h4 {
      font-size: 32px;
    }
    
    h5 {
      font-size: 21px;
    }
    
    h6 {
      font-size: 14px;
    }
    
</style>
    <h1>This is h1 text</h1>
    <h2>This is h2 text</h2>
    <h3>This is h3 text</h3>
    <h4>This is h4 text</h4>
    <h5>This is h5 text</h5>
    <h6>This is h6 text</h6>

<!--
Set the font-weight for Multiple Heading Elements

You set the font-size of each heading tag in the last challenge, here you'll adjust the font-weight.

The font-weight property sets how thick or thin characters are in a section of text.

    Set the font-weight of the h1 tag to 800.
    Set the font-weight of the h2 tag to 600.
    Set the font-weight of the h3 tag to 500.
    Set the font-weight of the h4 tag to 400.
    Set the font-weight of the h5 tag to 300.
    Set the font-weight of the h6 tag to 200.
-->
<style>
    h1 {
      font-size: 68px;
      font-weight: 800;
    }
    h2 {
      font-size: 52px;
      font-weight: 600;
    }
    h3 {
      font-size: 40px;
      font-weight: 500;
    }
    h4 {
      font-size: 32px;
      font-weight: 400;
    }
    h5 {
      font-size: 21px;
      font-weight: 300;
    }
    h6 {
      font-size: 14px;
      font-weight: 200;
    }
  </style>
  <h1>This is h1 text</h1>
  <h2>This is h2 text</h2>
  <h3>This is h3 text</h3>
  <h4>This is h4 text</h4>
  <h5>This is h5 text</h5>
  <h6>This is h6 text</h6>

<!--
Set the font-size of Paragraph Text

The font-size property in CSS is not limited to headings, it can be applied to any element containing text.

Change the value of the font-size property for the paragraph to 16px to make it more visible.
-->
<style>
    p {
      font-size: 16px;
    }
</style>

<!--
Set the line-height of Paragraphs

CSS offers the line-height property to change the height of each line in a block of text. As the name suggests, it changes the amount of vertical space that each line of text gets.

Add a line-height property to the p tag and set it to 25px.
-->
<style>
    p {
      font-size: 16px;
      line-height: 25px;
  
    }
</style>

<!--
Adjust the Hover State of an Anchor Tag

This challenge will touch on the usage of pseudo-classes. A pseudo-class is a keyword that can be added to selectors, in order to select a specific state of the element.

For example, the styling of an anchor tag can be changed for its hover state using the :hover pseudo-class selector. Here's the CSS to change the color of the anchor tag to red during its hover state:

a:hover {
  color: red;
}

The code editor has a CSS rule to style all a tags black. Add a rule so that when the user hovers over the a tag, the color is blue.
-->
<style>
    a {
      color: #000;
    }
  
    a:hover {
      color: blue;
    }
  
  
  </style>
  <a href="https://freecatphotoapp.com/" target="_blank">CatPhotoApp</a>

  <!--
Change an Element's Relative Position

CSS treats each HTML element as its own box, which is usually referred to as the CSS Box Model. Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans). The default layout of elements in this way is called the normal flow of a document, but CSS offers the position property to override it.

When the position of an element is set to relative, it allows you to specify how CSS should move it relative to its current position in the normal flow of the page. It pairs with the CSS offset properties of left or right, and top or bottom. These say how many pixels, percentages, or ems to move the item away from where it is normally positioned. The following example moves the paragraph 10 pixels away from the bottom:

p {
  position: relative;
  bottom: 10px;
}

Changing an element's position to relative does not remove it from the normal flow - other elements around it still behave as if that item were in its default position.

Note: Positioning gives you a lot of flexibility and power over the visual layout of a page. It's good to remember that no matter the position of elements, the underlying HTML markup should be organized and make sense when read from top to bottom. This is how users with visual impairments (who rely on assistive devices like screen readers) access your content.

Change the position of the h2 to relative, and use a CSS offset to move it 15 pixels away from the top of where it sits in the normal flow. Notice there is no impact on the positions of the surrounding h1 and p elements.
  -->

  <style>
    h2 {
      position: relative;
      top: 15px;
    }
  </style>
  <body>
    <h1>On Being Well-Positioned</h1>
    <h2>Move me!</h2>
    <p>I still think the h2 is where it normally sits.</p>
  </body>

<!--
Move a Relatively Positioned Element with CSS Offsets

The CSS offsets of top or bottom, and left or right tell the browser how far to offset an item relative to where it would sit in the normal flow of the document. You're offsetting an element away from a given spot, which moves the element away from the referenced side (effectively, the opposite direction). As you saw in the last challenge, using the top offset moved the h2 downwards. Likewise, using a left offset moves an item to the right.

Use CSS offsets to move the h2 15 pixels to the right and 10 pixels up.
-->
<head>
    <style>
      h2 {
        position: relative;
        bottom: 10px;
        left: 15px;
    
    
      }
    </style>
    </head>
    <body>
      <h1>On Being Well-Positioned</h1>
      <h2>Move me!</h2>
      <p>I still think the h2 is where it normally sits.</p>
    </body>

<!--
Lock an Element to its Parent with Absolute Positioning

The next option for the CSS position property is absolute, which locks the element in place relative to its parent container. Unlike the relative position, this removes the element from the normal flow of the document, so surrounding items ignore it. The CSS offset properties (top or bottom and left or right) are used to adjust the position.

One nuance with absolute positioning is that it will be locked relative to its closest positioned ancestor. If you forget to add a position rule to the parent item, (this is typically done using position: relative;), the browser will keep looking up the chain and ultimately default to the body tag.

Lock the #searchbar element to the top-right of its section parent by declaring its position as absolute. Give it top and right offsets of 50 pixels each.
-->
<style>
    #searchbar {
  
      position: absolute;
      top: 50px;
      right: 50px;
  
    }
    section {
      position: relative;
    }
  </style>
  <body>
    <h1>Welcome!</h1>
    <section>
      <form id="searchbar">
        <label for="search">Search:</label>
        <input type="search" id="search" name="search">
        <input type="submit" name="submit" value="Go!">
      </form>
    </section>
  </body>

<!--
Lock an Element to the Browser Window with Fixed Positioning

The next layout scheme that CSS offers is the fixed position, which is a type of absolute positioning that locks an element relative to the browser window. Similar to absolute positioning, it's used with the CSS offset properties and also removes the element from the normal flow of the document. Other items no longer "realize" where it is positioned, which may require some layout adjustments elsewhere.

One key difference between the fixed and absolute positions is that an element with a fixed position won't move when the user scrolls.

The navigation bar in the code is labeled with an id of navbar. Change its position to fixed, and offset it 0 pixels from the top and 0 pixels from the left. After you have added the code, scroll the preview window to see how the navigation stays in place.
-->
<style>
    body {
      min-height: 150vh;
    }
    #navbar {
      position: fixed;
      top: 0px;
      left: 0px;
  
  
      width: 100%;
      background-color: #767676;
    }
    nav ul {
      margin: 0px;
      padding: 5px 0px 5px 30px;
    }
    nav li {
      display: inline;
      margin-right: 20px;
    }
    a {
      text-decoration: none;
    }
  </style>
  <body>
    <header>
      <h1>Welcome!</h1>
      <nav id="navbar">
        <ul>
          <li><a href="">Home</a></li>
          <li><a href="">Contact</a></li>
        </ul>
      </nav>
    </header>
    <p>I shift up when the #navbar is fixed to the browser window.</p>
  </body>

<!--
Push Elements Left or Right with the float Property

The next positioning tool does not actually use position, but sets the float property of an element. Floating elements are removed from the normal flow of a document and pushed to either the left or right of their containing parent element. It's commonly used with the width property to specify how much horizontal space the floated element requires.

The given markup would work well as a two-column layout, with the section and aside elements next to each other. Give the #left item a float of left and the #right item a float of right.
-->
<head>
    <style>
      #left {
        float: left;
        width: 50%;
      }
      #right {
        float: right;
        width: 40%;
      }
      aside, section {
        padding: 2px;
        background-color: #ccc;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Welcome!</h1>
    </header>
    <section id="left">
      <h2>Content</h2>
      <p>Good stuff</p>
    </section>
    <aside id="right">
      <h2>Sidebar</h2>
      <p>Links</p>
    </aside>
  </body>
<!--
Change the Position of Overlapping Elements with the z-index Property

When elements are positioned to overlap (i.e. using position: absolute | relative | fixed | sticky), the element coming later in the HTML markup will, by default, appear on the top of the other elements. However, the z-index property can specify the order of how elements are stacked on top of one another. It must be an integer (i.e. a whole number and not a decimal), and higher values for the z-index property of an element move it higher in the stack than those with lower values.

Add a z-index property to the element with the class name of first (the red rectangle) and set it to a value of 2 so it covers the other element (blue rectangle).
-->
<style>
  div {
    width: 60%;
    height: 200px;
    margin-top: 20px;
  }

  .first {
    background-color: red;
    position: absolute;
    z-index: 2;

  }
  .second {
    background-color: blue;
    position: absolute;
    left: 40px;
    top: 50px;
    z-index: 1;
  }
</style>

<div class="first"></div>
<div class="second"></div>

<!--
Center an Element Horizontally Using the margin Property

Another positioning technique is to center a block element horizontally. One way to do this is to set its margin to a value of auto.

This method works for images, too. Images are inline elements by default, but can be changed to block elements when you set the display property to block.

Center the div on the page by adding a margin property with a value of auto.
-->
<style>
  div {
    background-color: blue;
    height: 100px;
    width: 100px;
    margin: auto;
  }
</style>
<div></div>

<!--
Learn about Complementary Colors

Color theory and its impact on design is a deep topic and only the basics are covered in the following challenges. On a website, color can draw attention to content, evoke emotions, or create visual harmony. Using different combinations of colors can really change the look of a website, and a lot of thought can go into picking a color palette that works with your content.

The color wheel is a useful tool to visualize how colors relate to each other - it's a circle where similar hues are neighbors and different hues are farther apart. When two colors are opposite each other on the wheel, they are called complementary colors. They have the characteristic that if they are combined, they "cancel" each other out and create a gray color. However, when placed side-by-side, these colors appear more vibrant and produce a strong visual contrast.
https://en.wikipedia.org/wiki/Color_model
Some examples of complementary colors with their hex codes are:

    red (#FF0000) and cyan (#00FFFF)
    green (#00FF00) and magenta (#FF00FF)
    blue (#0000FF) and yellow (#FFFF00)

This is different than the outdated RYB color model that many of us were taught in school, which has different primary and complementary colors. Modern color theory uses the additive RGB model (like on a computer screen) and the subtractive CMY(K) model (like in printing). Read here for more information on this complex subject.

There are many color picking tools available online that have an option to find the complement of a color.

Note: Using color can be a powerful way to add visual interest to a page. However, color alone should not be used as the only way to convey important information because users with visual impairments may not understand that content. This issue will be covered in more detail in the Applied Accessibility challenges.

Change the background-color property of the blue and yellow classes to their respective colors. Notice how the colors look different next to each other than they do compared against the white background.
-->
<style>
  body {
    background-color: #FFFFFF;
  }
  .blue {
    background-color: #0000FF;
  }
  .yellow {
    background-color: #FFFF00;
  }
  div {
    display: inline-block;
    height: 100px;
    width: 100px;
  }
</style>
<div class="blue"></div>
<div class="yellow"></div>

<!--
Learn about Tertiary Colors

Computer monitors and device screens create different colors by combining amounts of red, green, and blue light. This is known as the RGB additive color model in modern color theory. Red (R), green (G), and blue (B) are called primary colors. Mixing two primary colors creates the secondary colors cyan (G + B), magenta (R + B) and yellow (R + G). You saw these colors in the Complementary Colors challenge. These secondary colors happen to be the complement to the primary color not used in their creation, and are opposite to that primary color on the color wheel. For example, magenta is made with red and blue, and is the complement to green.

Tertiary colors are the result of combining a primary color with one of its secondary color neighbors. For example, within the RGB color model, red (primary) and yellow (secondary) make orange (tertiary). This adds six more colors to a simple color wheel for a total of twelve.

There are various methods of selecting different colors that result in a harmonious combination in design. One example that can use tertiary colors is called the split-complementary color scheme. This scheme starts with a base color, then pairs it with the two colors that are adjacent to its complement. The three colors provide strong visual contrast in a design, but are more subtle than using two complementary colors.

Here are three colors created using the split-complement scheme:
Color	Hex Code
orange	#FF7F00
cyan	#00FFFF
raspberry	#FF007F

Change the background-color property of the orange, cyan, and raspberry classes to their respective colors. Make sure to use the hex codes and not the color names.

-->

<style>
  body {
    background-color: #FFFFFF;
  }

  .orange {
    background-color: #FF7F00;
  }

  .cyan {
    background-color: #00FFFF;
  }

  .raspberry {
    background-color: #FF007F;
  }

  div {
    height: 100px;
    width: 100px;
    margin-bottom: 5px;
  }
</style>

<div class="orange"></div>
<div class="cyan"></div>
<div class="raspberry"></div>

<!--
Adjust the Color of Various Elements to Complementary Colors

The Complementary Colors challenge showed that opposite colors on the color wheel can make each other appear more vibrant when placed side-by-side. However, the strong visual contrast can be jarring if it's overused on a website, and can sometimes make text harder to read if it's placed on a complementary-colored background. In practice, one of the colors is usually dominant and the complement is used to bring visual attention to certain content on the page.

This page will use a shade of teal (#09A7A1) as the dominant color, and its orange (#FF790E) complement to visually highlight the sign-up buttons. Change the background-color of both the header and footer from black to the teal color. Then change the h2 text color to teal as well. Finally, change the background-color of the button to the orange color.
-->
<style>
  body {
    background-color: white;
  }
  header {
    background-color: #09A7A1;
    color: white;
    padding: 0.25em;
  }
  h2 {
    color: #09A7A1;
  }
  button {
    background-color: #FF790E;
  }
  footer {
    background-color: #09A7A1;
    color: white;
    padding: 0.5em;
  }
</style>
<header>
  <h1>Cooking with FCC!</h1>
</header>
<main>
  <article>
    <h2>Machine Learning in the Kitchen</h2>
    <p>Join this two day workshop that walks through how to implement cutting-edge snack-getting algorithms with a command line interface. Coding usually involves writing exact instructions, but sometimes you need your computer to execute flexible commands, like <code>fetch Pringles</code>.</p>
    <button>Sign Up</button>
  </article>
  <article>
    <h2>Bisection Vegetable Chopping</h2>
    <p>This week-long retreat will level-up your coding ninja skills to actual ninja skills. No longer is the humble bisection search limited to sorted arrays or coding interview questions, applying its concepts in the kitchen will have you chopping carrots in O(log n) time before you know it.</p>
    <button>Sign Up</button>
  </article>
</main>
<br>
<footer>&copy; 2018 FCC Kitchen</footer>

<!--
Adjust the Hue of a Color

Colors have several characteristics including hue, saturation, and lightness. CSS3 introduced the hsl() function as an alternative way to pick a color by directly stating these characteristics.

Hue is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In hsl(), hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.

Saturation is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.

Lightness is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.

Here are a few examples of using hsl() with fully-saturated, normal lightness colors:
Color	HSL
red	hsl(0, 100%, 50%)
yellow	hsl(60, 100%, 50%)
green	hsl(120, 100%, 50%)
cyan	hsl(180, 100%, 50%)
blue	hsl(240, 100%, 50%)
magenta	hsl(300, 100%, 50%)

Change the background-color of each div element based on the class names (green, cyan, or blue) using hsl(). All three should have full saturation and normal lightness.
-->
<style>
  body {
    background-color: #FFFFFF;
  }

  .green {
    background-color: hsl(120, 100%, 50%);
  }

  .cyan {
    background-color: hsl(180, 100%, 50%);
  }

  .blue {
    background-color: hsl(240, 100%, 50%);
  }

  div {
    display: inline-block;
    height: 100px;
    width: 100px;
  }
</style>

<div class="green"></div>
<div class="cyan"></div>
<div class="blue"></div>

<!--
Adjust the Tone of a Color

The hsl() option in CSS also makes it easy to adjust the tone of a color. Mixing white with a pure hue creates a tint of that color, and adding black will make a shade. Alternatively, a tone is produced by adding gray or by both tinting and shading. Recall that the 's' and 'l' of hsl() stand for saturation and lightness, respectively. The saturation percent changes the amount of gray and the lightness percent determines how much white or black is in the color. This is useful when you have a base hue you like, but need different variations of it.

All elements have a default background-color of transparent. Our nav element currently appears to have a cyan background, because the element behind it has a background-color set to cyan. Add a background-color to the nav element so it uses the same cyan hue, but has 80% saturation and 25% lightness values to change its tone and shade.
-->
<style>
  header {
    background-color: hsl(180, 90%, 35%);
    color: #FFFFFF;
  }

  nav {
    background-color: hsl(180, 80%, 25%);
  }

  h1 {
    text-indent: 10px;
    padding-top: 10px;
  }

  nav ul {
    margin: 0px;
    padding: 5px 0px 5px 30px;
  }

  nav li {
    display: inline;
    margin-right: 20px;
  }

  a {
    text-decoration: none;
    color: inherit;
  }
</style>

<header>
  <h1>Cooking with FCC!</h1>
  <nav>
    <ul>
      <li><a href="#">Home</a></li>
      <li><a href="#">Classes</a></li>
      <li><a href="#">Contact</a></li>
    </ul>
  </nav>
</header>

<!--
Create a Gradual CSS Linear Gradient

Applying a color on HTML elements is not limited to one flat hue. CSS provides the ability to use color transitions, otherwise known as gradients, on elements. This is accessed through the background property's linear-gradient() function. Here is the general syntax:

background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);

The first argument specifies the direction from which color transition starts - it can be stated as a degree, where 90deg makes a horizontal gradient (from left to right) and 45deg makes a diagonal gradient (from bottom left to top right). The following arguments specify the order of colors used in the gradient.

Example:

background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));

Use a linear-gradient() for the div element's background, and set it from a direction of 35 degrees to change the color from #CCFFFF to #FFCCCC.
-->